


PROBLEMS
- Composing
Functions are very buggy with composing emails.
sometimes it doesn't like sending from user1 to user or vice versa. It will work, just need to change login.  Will need to test to isolate at some stage.Note
    - Can't seem to send to user@sample.com. but can send to other userse
    - meanwhile user@sample.com can send to to otheres???

- Inbox.
- When user has no messages it sends an error message up to the console, but nothing actually appears. It's because it looks through the emails for a 'sender' but if there are no emails it won't find anyone



*** DONE ***
- In inbox.js, inserted a Get Request to fetch list of all emails in inbox:
    - currently no emails however. so empty arrays.
    - Javascript to print out ddetails?
    - create emails so that something can be printed?



### Specification ###

Using JavaScript, HTML, and CSS, complete the implementation of your single-page-app email client inside of inbox.js (and not additional or other files; for grading purposes, we’re only going to be considering inbox.js!). You must fulfill the following requirements:

### Send Mail: 
When a user submits the email composition form, add JavaScript code to actually send the email. ** DONE **
** TODO ** - Problem where we can't send an email to user@sample.com, but all other emails can be sent.  Weird.
- You’ll likely want to make a POST request to /emails, passing in values for recipients, subject, and body. ** DONE **
- Once the email has been sent, load the user’s sent mailbox. ** DONE **

### Mailbox: 
- When a user visits their Inbox, Sent mailbox, or Archive, load the appropriate mailbox. ** DONE **
- You’ll likely want to make a GET request to /emails/<mailbox> to request the emails for a particular mailbox. ** DONE **
- When a mailbox is visited, the application should first query the API for the latest emails in that mailbox.** DONE ** 
- When a mailbox is visited, the name of the mailbox should appear at the top of the page (this part is done for you).** DONE **
- Each email should then be rendered in its own box (e.g. as a <div> with a border) that displays who the email is from, what the subject line is, and the timestamp of the email. **DONE**  ** TODO ** - Need to improve formatting, get rid of titles and add bolding as per mail instructions

- If the email is unread, it should appear with a white background. If the email has been read, it should appear with a gray background. **DONE**

### View Email: 
- When a user clicks on an email, the user should be taken to a view where they see the content of that email. **DONE**  
**TODO** You use a convoluted way of getting there, might be good to incorporate the method set out in the problem details - Also, not formatted yet. 
- You’ll likely want to make a GET request to /emails/<email_id> to request the email **DONE** .
- Your application should show the email’s sender, recipients, subject, timestamp, and body. **DONE** 
- You’ll likely want to add an additional div to inbox.html (in addition to emails-view and compose-view) for displaying the email. Be sure to update your code to hide and show the right views when navigation options are clicked. **DONE**
- See the hint in the Hints section about how to add an event listener to an HTML element that you’ve added to the DOM.**DONE**
- Once the email has been clicked on, you should mark the email as read. Recall that you can send a PUT request to /emails/<email_id> to update whether an email is read or not.**DONE**

### Archive and Unarchive: 
- Allow users to archive and unarchive emails that they have received. ** DONE**
- When viewing an Inbox email, the user should be presented with a button that lets them archive the email. When viewing an Archive email, the user should be presented with a button that lets them unarchive the email. This requirement does not apply to emails in the Sent mailbox.** DONE**
- Recall that you can send a PUT request to /emails/<email_id> to mark an email as archived or unarchived.
Once an email has been archived or unarchived, load the user’s inbox.** DONE**

** TODO ** - Delay in updating status of emails in inbox after archiving or unarchiving. Refresh works to reset the email, but when it goes straight to inbox it's archived status is not updated straight away.

### Reply: 
- Allow users to reply to an email.
- When viewing an email, the user should be presented with a “Reply” button that lets them reply to the email.
- When the user clicks the “Reply” button, they should be taken to the email composition form.
- Pre-fill the composition form with the recipient field set to whoever sent the original email.
- Pre-fill the subject line. If the original email had a subject line of foo, the new subject line should be Re: foo. (If the subject line already begins with Re: , no need to add it again.)
- Pre-fill the body of the email with a line like "On Jan 1 2020, 12:00 AM foo@example.com wrote:" followed by the original text of the email.